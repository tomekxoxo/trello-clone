generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  origin        Origin    @default(GOOGLE)
  boardsIds     String[]  @db.ObjectId
  boards        Board[]   @relation("boards", fields: [boardsIds], references: [id])
  ownerBoards   Board[]   @relation("owner")
  tasksIds      String[]  @db.ObjectId
  tasks         Task[]    @relation("task-user", fields: [tasksIds], references: [id])
  comments      Comment[] @relation("comment-user")

  @@unique([email])
}

model Board {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  image       String?
  description String?
  visibility  Visibility @default(PUBLIC)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  usersIds    String[]   @db.ObjectId
  users       User[]     @relation("boards", fields: [usersIds], references: [id])
  ownerId     String     @db.ObjectId
  owner       User       @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  columns     Column[]   @relation("board-column")
  tasks       Task[]     @relation("board-task")
}

model Column {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  boardId   String   @db.ObjectId
  board     Board    @relation("board-column", fields: [boardId], references: [id])
  tasks     Task[]   @relation("task-column")
}

model Task {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  status      Status    @default(BACKLOG)
  image       String?
  boardId     String    @db.ObjectId
  board       Board     @relation("board-task", fields: [boardId], references: [id], onUpdate: Cascade)
  columnId    String    @unique @db.ObjectId
  column      Column    @relation("task-column", fields: [columnId], references: [id], onUpdate: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  usersIds    String[]  @db.ObjectId
  users       User[]    @relation("task-user", fields: [usersIds], references: [id])
  labelsIds   String[]  @db.ObjectId
  labels      Label[]   @relation("task-label", fields: [labelsIds], references: [id])
  comments    Comment[] @relation("task-comment")
}

model Label {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  color    String
  tasksIds String[] @db.ObjectId
  tasks    Task[]   @relation("task-label", fields: [tasksIds], references: [id])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    String   @db.ObjectId
  task      Task     @relation("task-comment", fields: [taskId], references: [id], onUpdate: Cascade)
  userId    String   @db.ObjectId
  user      User     @relation("comment-user", fields: [userId], references: [id], onUpdate: Cascade)
}

enum Origin {
  LOCAL
  GOOGLE
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum Status {
  BACKLOG
  IN_PROGRESS
  QA
  DONE
}
